{"version":3,"sources":["InputBox.js","regex.js","App.js","serviceWorker.js","index.js"],"names":["InputBox","props","className","label","onChange","e","handleChange","name","style","height","showErrorMessage","errorMessage","nameRegex","RegExp","passwordRegex","emailRegex","App","useState","isFormSubmitted","setFormSubmitted","firstName","lastName","email","password","isValid","setIsValid","formValues","setFormValues","value","test","checkValidation","target","onSubmit","console","log","preventDefault","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5e9212e2.chunk.js","sourcesContent":["import React from 'react';\nimport { Input } from 'antd';\n\n\nconst InputBox = (props) => {\n  // console.log(props);\n  return (\n    <div className=\"inputbox-container\">\n      <label className=\"label\">{props.label}</label>\n      <Input onChange={(e) => props.handleChange(e, props.name)} style={{height: 40}}/>\n      {props.showErrorMessage && <span className=\"error-message\">{props.errorMessage}</span>}\n    </div>\n  );\n}\n\nexport default InputBox\n","export const nameRegex = new RegExp(/^[A-Z]+$/i)\nexport const passwordRegex = new RegExp(/^[a-zA-Z0-9]{8,}$/)\nexport const emailRegex = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@(([[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n","import React, { useState } from 'react';\nimport InputBox from './InputBox.js'\nimport { nameRegex, emailRegex, passwordRegex } from './regex'\nimport './App.css';\n\nfunction App(props){\n\n  const [isFormSubmitted, setFormSubmitted] = useState(false)\n  const [isValid, setIsValid] = useState({\n    firstName: false,\n    lastName: false,\n    email: false,\n    password: false,\n  })\n  const [formValues, setFormValues] = useState({\n    email: \"\",\n    firstName: \"\",\n    lastName: \"\",\n    password: \"\"\n  })\n\n  const checkValidation = (name, value) => {\n    switch (name) {\n      case \"firstName\":\n        if (nameRegex.test(value)) {\n          setIsValid({...isValid, firstName: true})\n        }\n        else {\n          setIsValid({...isValid, firstName: false})\n        }\n        break;\n      case \"lastName\":\n        if (nameRegex.test(value)) {\n          setIsValid({...isValid, lastName: true})\n        }\n        else {\n          setIsValid({...isValid, lastName: false})\n        }\n        break;\n      case \"email\":\n        if (emailRegex.test(value)) {\n          setIsValid({...isValid, email: true})\n        }\n        else {\n          setIsValid({...isValid, email: false})\n        }\n        break;\n      case \"password\":\n        if (passwordRegex.test(value)) {\n          setIsValid({...isValid, password: true})\n        }\n        else {\n          setIsValid({...isValid, password: false})          \n        }\n        break;\n      default:\n    }\n  }\n\n\n  const handleChange = (e, name) => {\n    checkValidation(name, e.target.value)\n    setFormValues({...formValues, [name]: e.target.value})\n  }\n\n  const handleSubmit = (e) => {\n    setFormSubmitted(true)\n    console.log(formValues);\n    e.preventDefault()\n  }\n\n\n  return (\n    <div className=\"app\">\n        <div className=\"form-parent\">\n          <div className=\"form-header\">Get Started Today!</div>\n          <form onSubmit={handleSubmit} className=\"form\">\n            <div className=\"level-container\">\n              <InputBox\n                showErrorMessage={isFormSubmitted && !isValid.firstName}\n                value={formValues.firstName}\n                errorMessage=\"Please enter a valid first name\"\n                handleChange={handleChange} name=\"firstName\" label=\"First Name\"/>\n              <InputBox\n                showErrorMessage={isFormSubmitted && !isValid.lastName}\n                value={formValues.lastName}\n                errorMessage=\"Please enter a valid last name\"\n                handleChange={handleChange} name=\"lastName\" label=\"Last Name\"/>\n            </div>\n            <div className=\"level-container\">\n              <InputBox\n                showErrorMessage={isFormSubmitted && !isValid.email}\n                value={formValues.email}\n                errorMessage=\"Please enter a valid email\"\n                handleChange={handleChange} name=\"email\" label=\"Email\"/>\n              <InputBox\n                showErrorMessage={isFormSubmitted && !isValid.password}\n                value={formValues.password}\n                errorMessage=\"Please enter a valid password\"\n                handleChange={handleChange} name=\"password\" label=\"Password\"/>\n            </div>\n            <button className=\"submit-button\">Claim your free trial</button>\n            <span>You are agreeing to our <a href=\"/\">Terms and Services</a></span>\n          </form>\n        </div>\n    </div>\n  )\n\n}\n\n\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}